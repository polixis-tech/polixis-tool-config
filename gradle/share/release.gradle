ext {
    isReleasePluginApplied = project.pluginManager.hasPlugin('com.google.cloud.artifactregistry.gradle-plugin')
    isJavaPluginApplied = project.pluginManager.hasPlugin('java')
    isJavaPlatformPluginApplied = project.pluginManager.hasPlugin('java-platform')
    isShadowPluginApplied = project.pluginManager.hasPlugin('com.github.johnrengelman.shadow')
    isSnapshotVersion = project.version.endsWith('-SNAPSHOT')
    shouldPublishShadow = ext.find('shouldPublishShadow') ?: false
    shouldPublishTests = ext.find('shouldPublishTests') ?: false
    shouldPublishTestSources = ext.find('shouldPublishTestSources') ?: false
    uploadAfterRelease = ext.has('uploadAfterRelease') ? ext.get('uploadAfterRelease') : true
}

if (project.ext.isJavaPluginApplied) {
    task sourcesJar(type: Jar) {
        from sourceSets.main.allJava
        archiveClassifier = "sources"
    }

    task javadocJar(type: Jar) {
        from javadoc
        archiveClassifier = "javadoc"
    }

    if (project.ext.shouldPublishTests) {
        task testsJar(type: Jar) {
            from sourceSets.test.output.classesDirs
            archiveClassifier = "tests"
        }
    }

    if (project.ext.shouldPublishTestSources) {
        task testSourcesJar(type: Jar) {
            from sourceSets.test.allJava
            archiveClassifier = "test-sources"
        }
    }
}

publishing {
    repositories {
        maven {
            name = "artifact-registry-release"
            url = version.endsWith('SNAPSHOT')
                    ? "artifactregistry://europe-west6-maven.pkg.dev/hybrid-chess-313408/maven-internal"
                    : "artifactregistry://europe-west6-maven.pkg.dev/hybrid-chess-313408/maven-snapshot"
        }
    }
}

repositories {
    maven {
        name = "release"
        url "artifactregistry://europe-west6-maven.pkg.dev/hybrid-chess-313408/maven-internal"
    }
    maven {
        name = "snapshot"
        url "artifactregistry://europe-west6-maven.pkg.dev/hybrid-chess-313408/maven-snapshot"
    }
}
//if (ext.isReleasePluginApplied) {
////    publish {
////        tagTemplate = 'v${version}'
////        preTagCommitMessage = 'Release: '
////        newVersionCommitMessage = 'Version bump commit: '
////
////        git {
////            requireBranch = 'release'
////            pushToRemote = 'origin'
////        }
////    }
//    if (project.ext.uploadAfterRelease) {
//        // Automatically upload artifacts after `./gradlew release`
//        afterReleaseBuild.dependsOn publish
//    }
//}